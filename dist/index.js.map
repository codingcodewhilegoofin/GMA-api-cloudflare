{
  "version": 3,
  "sources": ["../node_modules/itty-router/dist/itty-router.min.mjs", "../src/handlers/tests.js", "../src/handlers/test.js", "../src/handlers/OpenAi/apitest.js", "../src/handlers/Spotify/artist.js", "../src/handlers/Spotify/artists.js", "../src/handlers/Financial/stock.js", "../src/handlers/Financial/cryptoTicker.js", "../src/handlers/Financial/nft.js", "../src/handlers/Financial/gov.js", "../src/handlers/Arduino/codeLedToggleON.js", "../src/handlers/Arduino/webSiteLedToggleON.js", "../src/handlers/Arduino/codeLedToggleOFF.js", "../src/handlers/Arduino/codeLedSTATUS.js", "../src/handlers/Mongo/MongoBackend.js", "../src/handlers/Mongo/MongoCreate.js", "../src/handlers/Mongo/MongoUpdate.js", "../src/handlers/Mongo/MongoDelete.js", "wrangler-module-Text:./6b79c8eaecc7f2d0c9a270746421c1027c9750f9-index.html", "../src/index.js"],
  "sourceRoot": "dist",
  "sourcesContent": ["function e({base:t=\"\",routes:n=[]}={}){return{__proto__:new Proxy({},{get:(e,a,o)=>(e,...r)=>n.push([a.toUpperCase(),RegExp(`^${(t+e).replace(/(\\/?)\\*/g,\"($1.*)?\").replace(/(\\/$)|((?<=\\/)\\/)/,\"\").replace(/:(\\w+)(\\?)?(\\.)?/g,\"$2(?<$1>[^/]+)$2$3\").replace(/\\.(?=[\\w(])/,\"\\\\.\").replace(/\\)\\.\\?\\(([^\\[]+)\\[\\^/g,\"?)\\\\.?($1(?<=\\\\.)[^\\\\.\")}/*$`),r])&&o}),routes:n,async handle(e,...r){let a,o,t=new URL(e.url);e.query=Object.fromEntries(t.searchParams);for(var[p,s,u]of n)if((p===e.method||\"ALL\"===p)&&(o=t.pathname.match(s))){e.params=o.groups;for(var c of u)if(void 0!==(a=await c(e.proxy||e,...r)))return a}}}}export default{Router:e};export{e as Router};\n", "const testUrl = 'https://swapi.dev/api/people/1/';\r\n\r\nconst Tests = async () => {\r\n    try {\r\n        const response = await fetch(testUrl);\r\n\r\n        if (!response.ok) {\r\n            const message = `Bad response: ${response.status}`;\r\n            //res.status(401).send(\"Could not find ticker symbol or other issue\");\r\n            throw new Error(message);\r\n        }\r\n        else {\r\n\r\n            const data = await response.json();\r\n\r\n            //res.status(200).send(data);\r\n            return new Response(JSON.stringify(data), {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Access-Control-Allow-Origin': '*',\r\n                    'Access-Control-Allow-Methods': 'GET,HEAD,POST,OPTIONS',\r\n                    'Access-Control-Max-Age': '86400',\r\n                }\r\n            });\r\n        }\r\n\r\n    }\r\n    catch (error) {\r\n        console.error(\"Failed GET for stock data: \" + error);\r\n        //res.status(401).send(\"Could not find ticker symbol or other issue\");\r\n    }\r\n};\r\n\r\nexport default Tests;", "const testUrl = 'https://swapi.dev/api/people/';\r\n\r\nconst Test = async (request, event) => {\r\n\r\n    const swapid = request.params.id;\r\n\r\n    try {\r\n        const response = await fetch((testUrl + `${swapid}/`));\r\n\r\n        if (!response.ok) {\r\n            const message = `Bad response: ${response.status}`;\r\n            //res.status(401).send(\"Could not find ticker symbol or other issue\");\r\n            throw new Error(message);\r\n        }\r\n        else {\r\n\r\n            const data = await response.json();\r\n\r\n            //res.status(200).send(data);\r\n            return new Response(JSON.stringify(data), {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Access-Control-Allow-Origin': '*',\r\n                    'Access-Control-Allow-Methods': 'GET,HEAD,POST,OPTIONS',\r\n                    'Access-Control-Max-Age': '86400',\r\n                }\r\n            });\r\n        }\r\n    }\r\n    catch (error) {\r\n        console.error(\"Failed GET for stock data: \" + error);\r\n        //res.status(401).send(\"Could not find ticker symbol or other issue\");\r\n    }\r\n};\r\n\r\nexport default Test;", "let userPrompt = 'Chicken Nuggets';\r\n\r\nconst ApiTest = async (request, event) => {\r\n\r\n    try {\r\n        const completion = await openai.createCompletion({\r\n            model: \"text-davinci-002\",\r\n            prompt: userPrompt,\r\n        });\r\n\r\n        console.log(completion);\r\n\r\n        completion.catch(error => console.error('caught error!', error));\r\n\r\n        console.log(completion.data.choices[0].text);\r\n\r\n        //console.log(completion.data.choices[0].text);\r\n        return new Response(JSON.stringify(completion.data.choices[0].text), {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Access-Control-Allow-Origin': '*',\r\n                'Access-Control-Allow-Methods': 'GET,HEAD,POST,OPTIONS',\r\n                'Access-Control-Max-Age': '86400',\r\n            }\r\n        });\r\n    }\r\n    catch (error) {\r\n        console.error(\"Failed GET for openai data: \" + error);\r\n    }\r\n};\r\nexport default ApiTest;", "//Spotify\r\nconst baseUrl = 'https://accounts.spotify.com/api/token';\r\nconst artistUrlBase = 'https://api.spotify.com/v1/artists/';\r\nlet artistID = '7bSpQNOg9UsW530DuXM3X5';\r\n\r\nconst Artist = async (request, event) => {\r\n\r\n    //const artistID = request.params.artistID;\r\n   \r\n    if (request.params.artistID) {\r\n        artistID = request.params.artistID;\r\n    } else {\r\n        artistID = '7bSpQNOg9UsW530DuXM3X5';\r\n    }\r\n\r\n    try {\r\n\r\n        const response = await fetch(baseUrl, {\r\n            method: 'POST',\r\n            body: 'grant_type=client_credentials&client_id=' + SPOTIFY_CLIENT_ID + '&client_secret=' + SPOTIFY_CLIENT_TOKEN,\r\n            headers: {\r\n                'Content-Type': 'application/x-www-form-urlencoded'\r\n            }\r\n        });\r\n        if (!response.ok) {\r\n            const message = `An error has occured: ${response.status}`;\r\n            throw new Error(message);\r\n        }\r\n        else {\r\n\r\n            //response.json() is a method on the Response object that lets you extract a JSON object from the response\r\n            const token = await response.json();\r\n\r\n            try {\r\n                const dataResponse = await fetch((artistUrlBase + artistID), {\r\n                    method: 'GET',\r\n                    headers: {\r\n                        'Authorization': `Bearer ${token.access_token}`,\r\n                        'Content-Type': 'application/json'\r\n                    }\r\n                });\r\n                if (!dataResponse.ok) {\r\n                    const message = `Could not get spotify data : ${dataResponse.status}`;\r\n                    throw new Error(message);\r\n                }\r\n                else {\r\n\r\n                    //response.json() is a method on the Response object that lets you extract a JSON object from the response\r\n                    const data = await dataResponse.json();\r\n\r\n                    return new Response(JSON.stringify(data), {\r\n                        headers: {\r\n                            'Content-Type': 'application/json',\r\n                            'Access-Control-Allow-Origin': '*',\r\n                            'Access-Control-Allow-Methods': 'GET,HEAD,POST,OPTIONS',\r\n                            'Access-Control-Max-Age': '86400',\r\n                        }\r\n                    });\r\n                }\r\n\r\n            }\r\n            catch (error) {\r\n                console.log(\"Error in getSpotifyAPI() data transfer : \" + error);\r\n            }\r\n        }\r\n    }\r\n    catch (error) {\r\n        console.error(\"Failed GET for Spotify data: \" + error);\r\n        //res.status(401).send(\"Could not find ticker symbol or other issue\");\r\n    }\r\n};\r\nexport default Artist;", "//Spotify\r\nconst baseUrl = 'https://accounts.spotify.com/api/token';\r\nconst artistUrlBase = 'https://api.spotify.com/v1/artists/';\r\nlet artistID = '7bSpQNOg9UsW530DuXM3X5';\r\n\r\nconst Artists = async (request, event) => {\r\n\r\n    try {\r\n\r\n        const response = await fetch(baseUrl, {\r\n            method: 'POST',\r\n            body: 'grant_type=client_credentials&client_id=' + SPOTIFY_CLIENT_ID + '&client_secret=' + SPOTIFY_CLIENT_TOKEN,\r\n            headers: {\r\n                'Content-Type': 'application/x-www-form-urlencoded'\r\n            }\r\n        });\r\n        if (!response.ok) {\r\n            const message = `An error has occured: ${response.status}`;\r\n            throw new Error(message);\r\n        }\r\n        else {\r\n\r\n            //response.json() is a method on the Response object that lets you extract a JSON object from the response\r\n            const token = await response.json();\r\n\r\n            try {\r\n                const dataResponse = await fetch((artistUrlBase + artistID), {\r\n                    method: 'GET',\r\n                    headers: {\r\n                        'Authorization': `Bearer ${token.access_token}`,\r\n                        'Content-Type': 'application/json'\r\n                    }\r\n                });\r\n                if (!dataResponse.ok) {\r\n                    const message = `Could not get spotify data : ${dataResponse.status}`;\r\n                    throw new Error(message);\r\n                }\r\n                else {\r\n\r\n                    //response.json() is a method on the Response object that lets you extract a JSON object from the response\r\n                    const data = await dataResponse.json();\r\n\r\n                    return new Response(JSON.stringify(data), {\r\n                        headers: {\r\n                            'Content-Type': 'application/json',\r\n                            'Access-Control-Allow-Origin': '*',\r\n                            'Access-Control-Allow-Methods': 'GET,HEAD,POST,OPTIONS',\r\n                            'Access-Control-Max-Age': '86400',\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            catch (error) {\r\n                console.log(\"Error in getSpotifyAPI() data transfer : \" + error);\r\n            }\r\n        }\r\n    }\r\n    catch (error) {\r\n        console.error(\"Failed GET for Spotify data: \" + error);\r\n        //res.status(401).send(\"Could not find ticker symbol or other issue\");\r\n    }\r\n};\r\nexport default Artists;", "//PolygonAPI URL\r\nconst polygonUrlBase = 'https://api.polygon.io/v1/open-close/';\r\nlet symbol = 'AAPL';\r\nlet date = '2022-08-03';\r\nlet adjusted = 'true';\r\n\r\nconst Stockticker = async (request, event) => {\r\n\r\n    if (request.params.symbol) {\r\n        symbol = request.params.symbol;\r\n    } else {\r\n        symbol = 'AAPL';\r\n    }\r\n\r\n    if (request.params.date) {\r\n        date = request.params.date;\r\n    } else {\r\n        date = '2022-08-03';\r\n    }\r\n\r\n    if (request.params.adjusted) {\r\n        adjusted = request.params.adjusted;\r\n    } else {\r\n        adjusted = 'true';\r\n    }\r\n\r\n    try {\r\n        const response = await fetch((polygonUrlBase + `${symbol}/` + `${date}/` + `?adjusted=${adjusted}` + `&apiKey=${POLYGON_API_KEY}`));\r\n\r\n        if (!response.ok) {\r\n            const message = `Bad response: ${response.status}`;\r\n            res.status(401).send(\"Could not find ticker symbol or other issue\");\r\n            throw new Error(message);\r\n        }\r\n        else {\r\n\r\n            const data = await response.json();\r\n\r\n            return new Response(JSON.stringify(data), {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Access-Control-Allow-Origin': '*',\r\n                    'Access-Control-Allow-Methods': 'GET,HEAD,POST,OPTIONS',\r\n                    'Access-Control-Max-Age': '86400',\r\n                }\r\n            });\r\n        }\r\n    }\r\n    catch (error) {\r\n        console.error(\"Failed GET for Polygon data: \" + error);\r\n        //res.status(401).send(\"Could not find ticker symbol or other issue\");\r\n    }\r\n};\r\nexport default Stockticker;", "//PolygonAPI URL\r\nconst polygonUrlBaseCrypto = 'https://api.polygon.io/v2/aggs/ticker/';\r\nlet cryptoTicker = 'X:BTCUSD';\r\nlet adjusted = 'true';\r\n\r\nconst CryptoTicker = async (request, event) => {\r\n\r\n    if (request.params.cryptoTicker) {\r\n        cryptoTicker = request.params.cryptoTicker;\r\n    } else {\r\n        cryptoTicker = 'X:BTCUSD';\r\n    }\r\n\r\n    if (request.params.adjusted) {\r\n        adjusted = request.params.adjusted;\r\n    } else {\r\n        adjusted = 'true';\r\n    }\r\n\r\n    try {\r\n        const response = await fetch( ( polygonUrlBaseCrypto + `${cryptoTicker}/` + `prev?adjusted=${adjusted}`+ `&apiKey=${POLYGON_API_KEY}` ) );\r\n\r\n        if (!response.ok) {\r\n            const message = `Bad response: ${response.status}`;\r\n            res.status(401).send(\"Could not find ticker symbol or other issue\");\r\n            throw new Error(message);\r\n        }\r\n        else {\r\n\r\n            const data = await response.json();\r\n\r\n            return new Response(JSON.stringify(data), {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Access-Control-Allow-Origin': '*',\r\n                    'Access-Control-Allow-Methods': 'GET,HEAD,POST,OPTIONS',\r\n                    'Access-Control-Max-Age': '86400',\r\n                }\r\n            });\r\n        }\r\n    }\r\n    catch (error) {\r\n        console.error(\"Failed GET for Crypto data: \" + error);\r\n        //res.status(401).send(\"Could not find ticker symbol or other issue\");\r\n    }\r\n};\r\nexport default CryptoTicker;", "//PolygonAPI URL\r\nconst openseaUrlBase = 'https://api.opensea.io/api/v1/collection/';\r\nlet collectionName = 'cryptopunks';\r\nlet date = '2022-08-03';\r\nlet adjusted = 'true';\r\n\r\nconst NftTicker = async (request, event) => {\r\n\r\n    if (request.params.collectionName) {\r\n        collectionName = request.params.collectionName;\r\n    } else {\r\n        collectionName = 'cryptopunks';\r\n    }\r\n   \r\n    try {\r\n        const nftOptions = {method: 'GET'};\r\n\r\n        const response = await fetch( ( openseaUrlBase + `/${collectionName}`  ), nftOptions );\r\n\r\n        if (!response.ok) {\r\n            const message = `Bad response: ${response.status}`;\r\n            res.status(401).send(\"Could not find ticker symbol or other issue\");\r\n            throw new Error(message);\r\n        }\r\n        else {\r\n\r\n            const data = await response.json();\r\n\r\n            return new Response(JSON.stringify(data), {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Access-Control-Allow-Origin': '*',\r\n                    'Access-Control-Allow-Methods': 'GET,HEAD,POST,OPTIONS',\r\n                    'Access-Control-Max-Age': '86400',\r\n                }\r\n            });\r\n        }\r\n    }\r\n    catch (error) {\r\n        console.error(\"Failed GET for Nft data: \" + error);\r\n        //res.status(401).send(\"Could not find ticker symbol or other issue\");\r\n    }\r\n};\r\nexport default NftTicker;", "const GovData = async (request, event) => {\r\n\r\n    try {\r\n        const response = await fetch('https://api.fiscaldata.treasury.gov/services/api/fiscal_service/v2/accounting/od/debt_outstanding?sort=-record_date');\r\n\r\n        if (!response.ok) {\r\n            const message = `Bad response: ${response.status}`;\r\n            res.status(401).send(\"Could not find ticker symbol or other issue\");\r\n            throw new Error(message);\r\n        }\r\n        else {\r\n\r\n            const data = await response.json();\r\n\r\n            return new Response(JSON.stringify(data), {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Access-Control-Allow-Origin': '*',\r\n                    'Access-Control-Allow-Methods': 'GET,HEAD,POST,OPTIONS',\r\n                    'Access-Control-Max-Age': '86400',\r\n                }\r\n            });\r\n        }\r\n    }\r\n    catch (error) {\r\n        console.error(\"Failed GET for Polygon data: \" + error);\r\n        //res.status(401).send(\"Could not find ticker symbol or other issue\");\r\n    }\r\n};\r\nexport default GovData;", "//Arduino Url\r\nconst ArduinoUrl = 'https://api2.arduino.cc/iot/v1/clients/token';\r\nconst thingsURL = \"https://api2.arduino.cc/iot/v2/things?show_properties=true\";\r\nconst propertiesPublishUrl = \"https://api2.arduino.cc/iot/v2/things\";\r\n\r\nconst CodeLedToggleON = async (request, event) => {\r\n\r\n    try {\r\n\r\n        // Turn on LED on website and board \r\n        async function getToken() {\r\n            let options = {\r\n                method: 'POST',\r\n                body: 'grant_type=client_credentials&client_id=' + ARDUINO_CLIENT_ID + '&client_secret=' + ARDUINO_SECRET_TOKEN + '&audience=' + 'https://api2.arduino.cc/iot',\r\n                headers: { 'content-type': 'application/x-www-form-urlencoded' },\r\n            };\r\n\r\n            try {\r\n                const response = await fetch(ArduinoUrl, options);\r\n\r\n                console.log(response.status);\r\n\r\n                if (!response.ok) {\r\n                    const message = `Bad response: ${response.status}`;\r\n                    throw new Error(message);\r\n                }\r\n                else {\r\n\r\n                    const tokenPackage = await response.json();\r\n                    const token = (tokenPackage['access_token']);\r\n\r\n                    return token;\r\n                }\r\n            }\r\n            catch (error) {\r\n                console.error(\"Failed getting an Arduino access token: \" + error);\r\n            }\r\n        }\r\n\r\n        async function useToken() {\r\n            try {\r\n\r\n                const token = await getToken();\r\n\r\n                let options2 = {\r\n                    method: 'GET',\r\n                    headers: {\r\n                        'Authorization': `Bearer ${token}`,\r\n                        'Content-Type': 'application/json'\r\n                    }\r\n                };\r\n\r\n                try {\r\n\r\n                    const response = await fetch(thingsURL, options2);\r\n\r\n                    if (!response.ok) {\r\n                        const message = `\\n An error has occured: ${response.status}`;\r\n\r\n                        throw new Error(message);\r\n                    }\r\n                    else {\r\n\r\n                        const data = await response.json();\r\n\r\n                        try {\r\n\r\n                            let options3 = {\r\n                                method: 'PUT',\r\n                                headers: {\r\n                                    'Authorization': `Bearer ${token}`,\r\n                                    'Content-Type': 'application/json'\r\n                                },\r\n                                body: JSON.stringify({\r\n\r\n                                    'value': true,\r\n                                })\r\n                            };\r\n\r\n                            const urlTemp = `${propertiesPublishUrl}/${data[0].id}/properties/${data[0].properties[2].id}/publish`;\r\n                            const response = await fetch(urlTemp, options3);\r\n\r\n                            if (!response.ok) {\r\n                                const message = `\\n Bad response PUT : ${response.status}`;\r\n                                throw new Error(message);\r\n                            }\r\n\r\n                            return response;\r\n\r\n                        }\r\n                        catch (error) {\r\n                            console.error(\"\\n Failed POST properties update request: \", error);\r\n                        }\r\n                    }\r\n                }\r\n                catch (error) {\r\n                    console.error(\"\\n Failed GET things request: \", error);\r\n                }\r\n\r\n            } catch (error) {\r\n                console.log(\"useToken() error occurred: \", error);\r\n            }\r\n        }\r\n\r\n        const arduinoResponse = await useToken();\r\n\r\n        return new Response(JSON.stringify(\"LED_ON \" + arduinoResponse.status), {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Access-Control-Allow-Origin': '*',\r\n                'Access-Control-Allow-Methods': 'GET,HEAD,POST,OPTIONS',\r\n                'Access-Control-Max-Age': '86400',\r\n            }\r\n        });\r\n    }\r\n    catch (error) {\r\n        console.error(\"Failed CodeLedToggleON function call : \" + error);\r\n        //res.status(401).send(\"Could not find ticker symbol or other issue\");\r\n    }\r\n};\r\nexport default CodeLedToggleON;", "//Arduino Url\r\nconst ArduinoUrl = 'https://api2.arduino.cc/iot/v1/clients/token';\r\nconst thingsURL = \"https://api2.arduino.cc/iot/v2/things?show_properties=true\";\r\nconst propertiesPublishUrl = \"https://api2.arduino.cc/iot/v2/things\";\r\n\r\nconst webSiteLedToggleON = async (request, event) => {\r\n\r\n    try {\r\n        // Turn on LED on website and board \r\n        async function getToken() {\r\n            let options = {\r\n                method: 'POST',\r\n                body: 'grant_type=client_credentials&client_id=' + ARDUINO_CLIENT_ID + '&client_secret=' + ARDUINO_SECRET_TOKEN + '&audience=' + 'https://api2.arduino.cc/iot',\r\n                headers: { 'content-type': 'application/x-www-form-urlencoded' },\r\n            };\r\n\r\n            try {\r\n                const response = await fetch(ArduinoUrl, options);\r\n\r\n                console.log(response.status);\r\n\r\n                if (!response.ok) {\r\n                    const message = `Bad response: ${response.status}`;\r\n                    throw new Error(message);\r\n                }\r\n                else {\r\n\r\n                    const tokenPackage = await response.json();\r\n                    const token = (tokenPackage['access_token']);\r\n\r\n                    return token;\r\n                }\r\n            }\r\n            catch (error) {\r\n                console.error(\"Failed getting an Arduino access token: \" + error);\r\n            }\r\n        }\r\n\r\n        async function useToken() {\r\n            try {\r\n\r\n                const token = await getToken();\r\n\r\n                let options2 = {\r\n                    method: 'GET',\r\n                    headers: {\r\n                        'Authorization': `Bearer ${token}`,\r\n                        'Content-Type': 'application/json'\r\n                    }\r\n                };\r\n\r\n                try {\r\n\r\n                    const response = await fetch(thingsURL, options2);\r\n\r\n                    if (!response.ok) {\r\n                        const message = `\\n An error has occured: ${response.status}`;\r\n\r\n                        throw new Error(message);\r\n                    }\r\n                    else {\r\n\r\n                        const data = await response.json();\r\n\r\n                        try {\r\n\r\n                            let options3 = {\r\n                                method: 'PUT',\r\n                                headers: {\r\n                                    'Authorization': `Bearer ${token}`,\r\n                                    'Content-Type': 'application/json'\r\n                                },\r\n                                body: JSON.stringify({\r\n\r\n                                    'value': true,\r\n                                })\r\n                            };\r\n                            \r\n                            const urlTemp = `${propertiesPublishUrl}/${data[0].id}/properties/${data[0].properties[3].id}/publish`;\r\n                            const response = await fetch(urlTemp, options3);\r\n\r\n                            if (!response.ok) {\r\n                                const message = `\\n Bad response PUT : ${response.status}`;\r\n                                throw new Error(message);\r\n                            }\r\n\r\n                            return response;\r\n\r\n                        }\r\n                        catch (error) {\r\n                            console.error(\"\\n Failed POST properties update request: \", error);\r\n                        }\r\n                    }\r\n                }\r\n                catch (error) {\r\n                    console.error(\"\\n Failed GET things request: \", error);\r\n                }\r\n\r\n            } catch (error) {\r\n                console.log(\"useToken() error occurred: \", error);\r\n            }\r\n        }\r\n\r\n        const arduinoResponse = await useToken();\r\n\r\n        console.log(\"arduinoResponse:\" , arduinoResponse);\r\n\r\n        return new Response(JSON.stringify(\"Connection to API is live, LED is on.\" + arduinoResponse.status), {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Access-Control-Allow-Origin': '*',\r\n                'Access-Control-Allow-Methods': 'GET,HEAD,POST,OPTIONS',\r\n                'Access-Control-Max-Age': '86400',\r\n            }\r\n        });\r\n    }\r\n    catch (error) {\r\n        console.error(\"Failed webSiteLedToggleOn function call : \" , error);\r\n        //res.status(401).send(\"Could not find ticker symbol or other issue\");\r\n    }\r\n};\r\nexport default webSiteLedToggleON", "//Arduino Url\r\nconst ArduinoUrl = 'https://api2.arduino.cc/iot/v1/clients/token';\r\nconst thingsURL = \"https://api2.arduino.cc/iot/v2/things?show_properties=true\";\r\nconst propertiesPublishUrl = \"https://api2.arduino.cc/iot/v2/things\";\r\n\r\nconst CodeLedToggleOFF = async (request, event) => {\r\n\r\n    try {\r\n\r\n        // Turn on LED on website and board \r\n        async function getToken() {\r\n            let options = {\r\n                method: 'POST',\r\n                body: 'grant_type=client_credentials&client_id=' + ARDUINO_CLIENT_ID + '&client_secret=' + ARDUINO_SECRET_TOKEN + '&audience=' + 'https://api2.arduino.cc/iot',\r\n                headers: { 'content-type': 'application/x-www-form-urlencoded' },\r\n            };\r\n\r\n            try {\r\n                const response = await fetch(ArduinoUrl, options);\r\n\r\n                console.log(response.status);\r\n\r\n                if (!response.ok) {\r\n                    const message = `Bad response: ${response.status}`;\r\n                    throw new Error(message);\r\n                }\r\n                else {\r\n\r\n                    const tokenPackage = await response.json();\r\n                    const token = (tokenPackage['access_token']);\r\n\r\n                    return token;\r\n                }\r\n            }\r\n            catch (error) {\r\n                console.error(\"Failed getting an Arduino access token: \" + error);\r\n            }\r\n        }\r\n\r\n        async function useToken() {\r\n            try {\r\n\r\n                const token = await getToken();\r\n\r\n                let options2 = {\r\n                    method: 'GET',\r\n                    headers: {\r\n                        'Authorization': `Bearer ${token}`,\r\n                        'Content-Type': 'application/json'\r\n                    }\r\n                };\r\n\r\n                try {\r\n\r\n                    const response = await fetch(thingsURL, options2);\r\n\r\n                    if (!response.ok) {\r\n                        const message = `\\n An error has occured: ${response.status}`;\r\n\r\n                        throw new Error(message);\r\n                    }\r\n                    else {\r\n\r\n                        const data = await response.json();\r\n\r\n                        try {\r\n\r\n                            let options3 = {\r\n                                method: 'PUT',\r\n                                headers: {\r\n                                    'Authorization': `Bearer ${token}`,\r\n                                    'Content-Type': 'application/json'\r\n                                },\r\n                                body: JSON.stringify({\r\n\r\n                                    'value': false,\r\n                                })\r\n                            };\r\n\r\n                            const urlTemp = `${propertiesPublishUrl}/${data[0].id}/properties/${data[0].properties[2].id}/publish`;\r\n                            const response = await fetch(urlTemp, options3);\r\n\r\n                            if (!response.ok) {\r\n                                const message = `\\n Bad response PUT : ${response.status}`;\r\n                                throw new Error(message);\r\n                            }\r\n\r\n                            return response;\r\n\r\n                        }\r\n                        catch (error) {\r\n                            console.error(\"\\n Failed POST properties update request: \", error);\r\n                        }\r\n                    }\r\n                }\r\n                catch (error) {\r\n                    console.error(\"\\n Failed GET things request: \", error);\r\n                }\r\n\r\n            } catch (error) {\r\n                console.log(\"useToken() error occurred: \", error);\r\n            }\r\n        }\r\n\r\n        const arduinoResponse = await useToken();\r\n\r\n        return new Response(JSON.stringify(\"LED_OFF \" + arduinoResponse.status), {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Access-Control-Allow-Origin': '*',\r\n                'Access-Control-Allow-Methods': 'GET,HEAD,POST,OPTIONS',\r\n                'Access-Control-Max-Age': '86400',\r\n            }\r\n        });\r\n    }\r\n    catch (error) {\r\n        console.error(\"Failed CodeLedToggleOFF function call : \" + error);\r\n        //res.status(401).send(\"Could not find ticker symbol or other issue\");\r\n    }\r\n};\r\nexport default CodeLedToggleOFF;", "//Arduino Url\r\nconst ArduinoUrl = 'https://api2.arduino.cc/iot/v1/clients/token';\r\nconst thingsURL = \"https://api2.arduino.cc/iot/v2/things?show_properties=true\";\r\nconst propertiesPublishUrl = \"https://api2.arduino.cc/iot/v2/things\";\r\n\r\nconst CodeLedSTATUS = async (request, event) => {\r\n\r\n    try {\r\n\r\n        // Turn on LED on website and board \r\n        async function getToken() {\r\n            let options = {\r\n                method: 'POST',\r\n                body: 'grant_type=client_credentials&client_id=' + ARDUINO_CLIENT_ID + '&client_secret=' + ARDUINO_SECRET_TOKEN + '&audience=' + 'https://api2.arduino.cc/iot',\r\n                headers: { 'content-type': 'application/x-www-form-urlencoded' },\r\n            };\r\n\r\n            try {\r\n                const response = await fetch(ArduinoUrl, options);\r\n\r\n                console.log(response.status);\r\n\r\n                if (!response.ok) {\r\n                    const message = `Bad response: ${response.status}`;\r\n                    throw new Error(message);\r\n                }\r\n                else {\r\n\r\n                    const tokenPackage = await response.json();\r\n                    const token = (tokenPackage['access_token']);\r\n\r\n                    return token;\r\n                }\r\n            }\r\n            catch (error) {\r\n                console.error(\"Failed getting an Arduino access token: \" + error);\r\n            }\r\n        }\r\n\r\n        async function useToken() {\r\n            try {\r\n\r\n                const token = await getToken();\r\n\r\n                let options2 = {\r\n                    method: 'GET',\r\n                    headers: {\r\n                        'Authorization': `Bearer ${token}`,\r\n                        'Content-Type': 'application/json'\r\n                    }\r\n                };\r\n\r\n                try {\r\n\r\n                    const arduinoResponse = await fetch(thingsURL, options2);\r\n\r\n                    if (!arduinoResponse.ok) {\r\n                        const message = `\\n An error has occured: ${arduinoResponse.status}`;\r\n\r\n                        throw new Error(message);\r\n                    }\r\n                    else {\r\n\r\n                        const arduinoData = await arduinoResponse.json();\r\n\r\n                        console.log(\" Response: \\n\", arduinoResponse);\r\n\r\n                        return { arduinoData, arduinoResponse };\r\n                    }\r\n                }\r\n                catch (error) {\r\n                    console.error(\"\\n Failed GET things request: \", error);\r\n                }\r\n\r\n            } catch (error) {\r\n                console.log(\"useToken() error occurred: \", error);\r\n            }\r\n        }\r\n\r\n        const { arduinoData, arduinoResponse } = await useToken();\r\n\r\n        console.log(\" Data: \\n\", arduinoData[0].properties[2]);\r\n\r\n        return new Response(JSON.stringify({\r\n            value: `${arduinoData[0].properties[2].last_value}`,\r\n            name: `${arduinoData[0].properties[2].name}`,\r\n            status: `${arduinoResponse.status}`,\r\n        }\r\n        ), {\r\n            headers:\r\n            {\r\n                'Content-Type': 'application/json',\r\n                'Access-Control-Allow-Origin': '*',\r\n                'Access-Control-Allow-Methods': 'GET,HEAD,POST,OPTIONS',\r\n                'Access-Control-Max-Age': '86400',\r\n            }\r\n        });\r\n    }\r\n    catch (error) {\r\n        console.error(\"Failed CodeLedToggleSTATUS function call : \" + error);\r\n        //res.status(401).send(\"Could not find ticker symbol or other issue\");\r\n    }\r\n};\r\nexport default CodeLedSTATUS;", "//Mongo URL\r\nconst MongoUrl = 'https://data.mongodb-api.com/app/data-inikb/endpoint/data/v1/action/find';\r\n\r\nconst MongoBackend = async (request, event) => {\r\n\r\n    try {\r\n\r\n        async function getAll() {\r\n            try {\r\n\r\n                const data = {\r\n                    \"collection\": \"gmwebsite\",\r\n                    \"database\": \"gmadb\",\r\n                    \"dataSource\": \"giobot\",\r\n                    \"filter\": {}\r\n                };\r\n\r\n                let options = {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                        'Access-Control-Request-Headers': '*',\r\n                        'api-key': MDB_TOKEN,\r\n                    },\r\n                    body: JSON.stringify(data),\r\n                };\r\n\r\n                console.log(\"Function is running calling... \");\r\n                console.log(options, options.headers, options.body);\r\n\r\n                const MongoResponse = await fetch(MongoUrl, options);\r\n\r\n                if (!MongoResponse.ok) {\r\n                    const message = `\\n Bad fetch: ${MongoResponse.status}`;\r\n                    console.log(message, ' Response is: ', MongoResponse.body, MongoResponse.headers, MongoResponse.statusText);\r\n                }\r\n                else {\r\n                    const MongoData = await MongoResponse.json();\r\n                    console.log(MongoData);\r\n\r\n                    return MongoData;\r\n                }\r\n\r\n            } catch (error) {\r\n                console.log(\"useToken() internal error occurred: \", error.message);\r\n            }\r\n        }\r\n\r\n        const MongoData = await getAll();\r\n        \r\n        console.log(\"MongoData is\" , MongoData?.documents[0])\r\n\r\n        return new Response(JSON.stringify(MongoData?.documents ?? \"Not found\"), {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Access-Control-Allow-Origin': '*',\r\n                'Access-Control-Allow-Methods': 'GET,HEAD,POST,OPTIONS',\r\n                'Access-Control-Max-Age': '86400',\r\n            }\r\n        });\r\n    }\r\n    catch (error) {\r\n        console.error(\"Failed MongoBackend call : \", error.message);\r\n    }\r\n};\r\nexport default MongoBackend;", "//Mongo URL\r\nconst MongoUrl = 'https://data.mongodb-api.com/app/data-inikb/endpoint/data/v1/action/insertOne';\r\nlet name = 'none';\r\nlet social = ['1', '2'];\r\nlet plug = '';\r\nlet date = '2022-12-08T01:11:18.965Z';\r\n\r\nconst MongoCreate = async (request, event) => {\r\n\r\n    if (request.params.name) {\r\n        name = request.params.name;\r\n    } else {\r\n        name = 'none';\r\n    }\r\n\r\n    if (request.params.social) {\r\n        social = request.params.social;\r\n    } else {\r\n        social = ['1', '2'];\r\n    }\r\n\r\n    if (request.params.plug) {\r\n        plug = request.params.plug;\r\n    } else {\r\n        plug = '';\r\n    }\r\n\r\n    if (request.params.date) {\r\n        date = request.params.date;\r\n    } else {\r\n        date = '2022-12-08T01:11:18.965Z';\r\n    }\r\n  \r\n    try {\r\n\r\n        async function createDocument() {\r\n            try {\r\n\r\n                const data = {\r\n                    \"collection\": \"gmwebsite\",\r\n                    \"database\": \"gmadb\",\r\n                    \"dataSource\": \"giobot\",\r\n                    \"document\": {\r\n                        \"name\": `${name}`,\r\n                        \"social\": [\r\n                            `${social}`,\r\n                        ],\r\n                        \"plug\": `${plug}`,\r\n                        \"date\": `${date}`,\r\n                    }\r\n                };\r\n\r\n                let options = {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                        'Access-Control-Request-Headers': '*',\r\n                        'api-key': MDB_TOKEN,\r\n                    },\r\n                    body: JSON.stringify(data),\r\n                };\r\n\r\n                console.log(\"Function is running calling... \");\r\n                console.log(options, options.headers, options.body);\r\n\r\n                const MongoResponse = await fetch(MongoUrl, options);\r\n\r\n                if (!MongoResponse.ok) {\r\n                    const message = `\\n Bad fetch: ${MongoResponse.status}`;\r\n                    console.log(message, ' Response is: ', MongoResponse.body, MongoResponse.headers, MongoResponse.statusText);\r\n                    return new Response(`Error : ${message}`, {\r\n                        headers: {\r\n                            'Content-Type': 'application/json',\r\n                            'Access-Control-Allow-Origin': '*',\r\n                            'Access-Control-Allow-Methods': 'GET,HEAD,POST,OPTIONS',\r\n                            'Access-Control-Max-Age': '86400',\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    const MongoData = await MongoResponse.json();\r\n                    console.log(MongoData);\r\n\r\n                    return MongoData;\r\n                }\r\n\r\n            } catch (error) {\r\n                console.log(\"useToken() internal error occurred: \", error.message);\r\n                return new Response(`Error : ${error.message}`, {\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                        'Access-Control-Allow-Origin': '*',\r\n                        'Access-Control-Allow-Methods': 'GET,HEAD,POST,OPTIONS',\r\n                        'Access-Control-Max-Age': '86400',\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        const MongoData = await createDocument();\r\n\r\n        console.log(\"MongoCreate sucessfull\", MongoData);\r\n\r\n        return new Response(JSON.stringify(MongoData), {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Access-Control-Allow-Origin': '*',\r\n                'Access-Control-Allow-Methods': 'GET,HEAD,POST,OPTIONS',\r\n                'Access-Control-Max-Age': '86400',\r\n            }\r\n        });\r\n    }\r\n    catch (error) {\r\n        console.error(\"Failed MongoCreate call : \", error.message);\r\n        return new Response(`Error : ${error.message}`, {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Access-Control-Allow-Origin': '*',\r\n                'Access-Control-Allow-Methods': 'GET,HEAD,POST,OPTIONS',\r\n                'Access-Control-Max-Age': '86400',\r\n            }\r\n        });\r\n    }\r\n};\r\nexport default MongoCreate;", "//Mongo URL\r\nconst MongoUrl = 'https://data.mongodb-api.com/app/data-inikb/endpoint/data/v1/action/updateOne';\r\n\r\nlet id = '';\r\nlet name = 'none';\r\nlet social = ['1', '2'];\r\nlet plug = '';\r\nlet date = '2022-12-08T01:11:18.965Z';\r\n\r\nconst MongoUpdate = async (request, event) => {\r\n\r\n    if (request.params.id) {\r\n        id = request.params.id;\r\n    } else {\r\n        id = '';\r\n    }\r\n\r\n    if (request.params.name) {\r\n        name = request.params.name;\r\n    } else {\r\n        name = 'none';\r\n    }\r\n\r\n    if (request.params.social) {\r\n        social = request.params.social;\r\n    } else {\r\n        social = ['1', '2'];\r\n    }\r\n\r\n    if (request.params.plug) {\r\n        plug = request.params.plug;\r\n    } else {\r\n        plug = '';\r\n    }\r\n\r\n    if (request.params.date) {\r\n        date = request.params.date;\r\n    } else {\r\n        date = '2022-12-08T01:11:18.965Z';\r\n    }\r\n  \r\n    try {\r\n\r\n        async function updateDocument() {\r\n            try {\r\n\r\n                const data = {\r\n                    \"collection\": \"gmwebsite\",\r\n                    \"database\": \"gmadb\",\r\n                    \"dataSource\": \"giobot\",\r\n                    \"filter\": { \"_id\": { \"$oid\": `${id}` } },\r\n                    \"update\": {\r\n                        \"$set\": {\r\n                            \"name\": `${name}`,\r\n                            \"social\": [\r\n                                `${social}`,\r\n                            ],\r\n                            \"plug\": `${plug}`,\r\n                            \"date\": `${date}`,\r\n                        }\r\n                    }\r\n                };\r\n\r\n                let options = {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                        'Access-Control-Request-Headers': '*',\r\n                        'api-key': MDB_TOKEN,\r\n                    },\r\n                    body: JSON.stringify(data),\r\n                };\r\n\r\n                const MongoResponse = await fetch(MongoUrl, options);\r\n\r\n                if (!MongoResponse.ok) {\r\n                    const message = `\\n Bad fetch: ${MongoResponse.status}`;\r\n                    console.log(message, ' Response is: ', MongoResponse.body, MongoResponse.headers, MongoResponse.statusText);\r\n                    return new Response(`Error : ${message}`, {\r\n                        headers: {\r\n                            'Content-Type': 'application/json',\r\n                            'Access-Control-Allow-Origin': '*',\r\n                            'Access-Control-Allow-Methods': 'GET,HEAD,POST,OPTIONS',\r\n                            'Access-Control-Max-Age': '86400',\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    const MongoData = await MongoResponse.json();\r\n\r\n                    return MongoData;\r\n                }\r\n\r\n            } catch (error) {\r\n                console.log(\"useToken() internal error occurred: \", error.message);\r\n                return new Response(`Error : ${error.message}`, {\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                        'Access-Control-Allow-Origin': '*',\r\n                        'Access-Control-Allow-Methods': 'GET,HEAD,POST,OPTIONS',\r\n                        'Access-Control-Max-Age': '86400',\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        const MongoData = await updateDocument();\r\n\r\n        console.log(\"MongoUpdate sucessfull\", MongoData);\r\n\r\n        return new Response(JSON.stringify(MongoData), {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Access-Control-Allow-Origin': '*',\r\n                'Access-Control-Allow-Methods': 'GET,HEAD,POST,OPTIONS',\r\n                'Access-Control-Max-Age': '86400',\r\n            }\r\n        });\r\n    }\r\n    catch (error) {\r\n        console.error(\"Failed MongoUpdate call : \", error.message);\r\n        return new Response(`Error : ${error.message}`, {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Access-Control-Allow-Origin': '*',\r\n                'Access-Control-Allow-Methods': 'GET,HEAD,POST,OPTIONS',\r\n                'Access-Control-Max-Age': '86400',\r\n            }\r\n        });\r\n    }\r\n};\r\nexport default MongoUpdate;", "//Mongo URL\r\nconst MongoUrl = 'https://data.mongodb-api.com/app/data-inikb/endpoint/data/v1/action/deleteOne';\r\n\r\nlet id = '';\r\n\r\nconst MongoDelete = async (request, event) => {\r\n\r\n    if (request.params.id) {\r\n        id = request.params.id;\r\n    } else {\r\n        id = '';\r\n    }\r\n\r\n    try {\r\n\r\n        async function deleteDocument() {\r\n            try {\r\n\r\n                const data = {\r\n                    \"collection\": \"gmwebsite\",\r\n                    \"database\": \"gmadb\",\r\n                    \"dataSource\": \"giobot\",\r\n                    \"filter\": { \"_id\": { \"$oid\": `${id}` } },\r\n                };\r\n\r\n                let options = {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                        'Access-Control-Request-Headers': '*',\r\n                        'api-key': MDB_TOKEN,\r\n                    },\r\n                    body: JSON.stringify(data),\r\n                };\r\n\r\n                const MongoResponse = await fetch(MongoUrl, options);\r\n\r\n                if (!MongoResponse.ok) {\r\n                    const message = `\\n Bad fetch: ${MongoResponse.status}`;\r\n                    console.log(message, ' Response is: ', MongoResponse.body, MongoResponse.headers, MongoResponse.statusText);\r\n                    return new Response(`Error : ${message}`, {\r\n                        headers: {\r\n                            'Content-Type': 'application/json',\r\n                            'Access-Control-Allow-Origin': '*',\r\n                            'Access-Control-Allow-Methods': 'GET,HEAD,POST,OPTIONS',\r\n                            'Access-Control-Max-Age': '86400',\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    const MongoData = await MongoResponse.json();\r\n                    \r\n                    return MongoData;\r\n                }\r\n\r\n            } catch (error) {\r\n                console.log(\"useToken() internal error occurred: \", error.message);\r\n                return new Response(`Error : ${error.message}`, {\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                        'Access-Control-Allow-Origin': '*',\r\n                        'Access-Control-Allow-Methods': 'GET,HEAD,POST,OPTIONS',\r\n                        'Access-Control-Max-Age': '86400',\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        const MongoData = await deleteDocument();\r\n        \r\n        console.log(\"MongoDelete sucessfull\" , MongoData);\r\n\r\n        return new Response(JSON.stringify(MongoData ), {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Access-Control-Allow-Origin': '*',\r\n                'Access-Control-Allow-Methods': 'GET,HEAD,POST,OPTIONS',\r\n                'Access-Control-Max-Age': '86400',\r\n            }\r\n        });\r\n    }\r\n    catch (error) {\r\n        console.error(\"Failed MongoDelete call : \", error.message);\r\n        return new Response(`Error : ${error.message}`, {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Access-Control-Allow-Origin': '*',\r\n                'Access-Control-Allow-Methods': 'GET,HEAD,POST,OPTIONS',\r\n                'Access-Control-Max-Age': '86400',\r\n            }\r\n        });\r\n    }\r\n};\r\nexport default MongoDelete;", "export default __6b79c8eaecc7f2d0c9a270746421c1027c9750f9_index_html;", "import { Router } from 'itty-router';\r\nimport Tests from './handlers/tests.js';\r\nimport Test from './handlers/test.js';\r\nimport ApiTest from './handlers/OpenAi/apitest.js';\r\nimport Artist from './handlers/Spotify/artist.js';\r\nimport Artists from './handlers/Spotify/artists.js';\r\nimport StockTicker from './handlers/Financial/stock.js';\r\nimport CryptoTicker from './handlers/Financial/cryptoTicker.js';\r\nimport NftTicker from './handlers/Financial/nft.js';\r\nimport GovData from './handlers/Financial/gov.js';\r\nimport CodeLedToggleON from './handlers/Arduino/codeLedToggleON.js';\r\nimport WebSiteLedToggleON from './handlers/Arduino/webSiteLedToggleON.js';\r\nimport CodeLedToggleOFF from './handlers/Arduino/codeLedToggleOFF.js';\r\nimport CodeLedSTATUS from './handlers/Arduino/codeLedSTATUS.js';\r\nimport MongoBackend from './handlers/Mongo/MongoBackend.js';\r\nimport MongoCreate from './handlers/Mongo/MongoCreate.js';\r\nimport MongoUpdate from './handlers/Mongo/MongoUpdate.js';\r\nimport MongoDelete from './handlers/Mongo/MongoDelete.js';\r\nimport Index from './html/index.html';\r\n\r\nconst router = Router();\r\n\r\nrouter.get('/api', () => new Response(Index , {\r\n  headers: { 'content-type': 'text/html' },\r\n})); \r\n\r\n// Test routes\r\nrouter.get('/api/tests', Tests)\r\nrouter.get('/api/test/:id', Test );\r\n\r\n// Connect to OpenAI API will need a standard HTTP request \r\nrouter.get('/api/OpenAi/:userPrompt', ApiTest );\r\n\r\n// Connect to Spotify API \r\nrouter.get('/api/Spotify', Artists );\r\nrouter.get('/api/Spotify/:artistID', Artist );\r\n\r\n// Connect to Financial APIs \r\nrouter.get('/api/Stock/:symbol/:date/:adjusted', StockTicker );\r\nrouter.get('/api/Crypto/:cryptoTicker/:adjusted', CryptoTicker );\r\nrouter.get('/api/Nft/:collectionName', NftTicker );\r\nrouter.get('/api/Gov', GovData );\r\n\r\n// Connect to Arduino API\r\nrouter.get('/api/Arduino/ToggleON', CodeLedToggleON );\r\nrouter.get('/api/Arduino/ToggleOFF', CodeLedToggleOFF );\r\nrouter.get('/api/Arduino/STATUS', CodeLedSTATUS );\r\nrouter.get('/api/Arduino/TestConnection', WebSiteLedToggleON );\r\n\r\n// Connect to MongoDB\r\nrouter.get('/api/Mongo', MongoBackend );\r\nrouter.get('/api/MongoCreate/:name/:social/:plug/:date', MongoCreate );\r\nrouter.get('/api/MongoUpdate/:id/:name/:social/:plug/:date', MongoUpdate );\r\nrouter.get('/api/MongoDelete/:id', MongoDelete );\r\n\r\nrouter.get('*', () => new Response('Whatever you did is not valid! ~ Did not find an endpoint for this please try again\uD83D\uDE15 ~ \uD83C\uDF34\u2600\uFE0F', { status: 404 }));\r\n\r\n//Test listener\r\naddEventListener('fetch', event =>\r\n  event.respondWith(router.handle(event.request))\r\n)"],
  "mappings": "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",
  "names": ["e", "t", "testUrl", "baseUrl", "artistUrlBase", "artistID", "adjusted", "response", "ArduinoUrl", "thingsURL", "propertiesPublishUrl", "response", "ArduinoUrl", "thingsURL", "propertiesPublishUrl", "response", "ArduinoUrl", "thingsURL", "ArduinoUrl", "arduinoResponse", "thingsURL", "arduinoData", "MongoData", "MongoUrl", "date", "MongoData", "MongoUrl", "name", "social", "plug", "date", "MongoData", "MongoUrl", "id", "MongoData"]
}
